<% if(copyright){ %>
/*
 * Copyright (c) <%- year %>, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */

<% } %>
import { SfCommand, Flags } from '@salesforce/sf-plugins-core';
import { Messages } from '@salesforce/core';

Messages.importMessagesDirectory(__dirname);
const messages = Messages.load('<%- pluginName %>', '<%- messageFile %>', [
  'summary',
  'description',
  'examples',
  'flags.name.summary',
]);

<% if (!resultType || resultType === 'object') { -%>
export type <%- returnType %> = {
  path: string;
};
<% } %>
<% if (resultType === 'list') { -%>
export type <%- returnType %> = Array<{
  path: string;
}>;
<% } %>

export default class <%- className %> extends SfCommand<<%- returnType %>> {
  public static readonly summary = messages.getMessage('summary');
  public static readonly description = messages.getMessage('description');
  public static readonly examples = messages.getMessages('examples');

  public static readonly flags = {
    <% if (!org && !devHub) { %>
    name: Flags.string({
      summary: messages.getMessage('flags.name.summary'),
      char: 'n',
      required: false,
    }),
    <% } %>
    <% if (org) { %>
    'target-org': Flags.requiredOrg(),
    <% } %>
    <% if (devHub) { %>
      'target-dev-hub': Flags.requiredHub(),
    <% } %>
    };

  public async run(): Promise<<%- returnType %>> {
    const { flags } = await this.parse(<%- className %>);

    <% if (!org && !devHub) { %>
    const name = flags.name ?? 'world';
    this.log(`hello ${name} from <%- commandPath.replace(/\\/g, '\\\\') %>`);
    <% } %>
    <% if (org) { %>
    this.log(`hello ${flags['target-org'].getUsername()} from <%- commandPath.replace(/\\/g, '\\\\') %>`);
    <% } %>
    <% if (!resultType || resultType === 'object') { %>
    return {
      path: '<%- commandPath.replace(/\\/g, '\\\\') %>',
    };
    <% } %>
    <% if (resultType === 'list') { %>
    return [{
      path: '<%- commandPath.replace(/\\/g, '\\\\') %>',
    }];
    <% } %>
    }
}
